SUMMARY: The next sections cover two topics. The first topic is the climax of all our work on graph search --- Dijkstra's shortest-path algorithm, surely one of the greatest hits of algorithms. It works in any directed graph with non-negative edge lengths, and it computes the shortest paths from a source vertex to all other vertices. Particularly nice is the blazingly fast implementation that uses a heap data structure. Speaking of data structures, they constitute the second topic of the week, Heaps. This is a huge (and hugely useful) topic, and the sixth and final week will also be devoted to them. This week covers heaps and balanced binary search trees. My primary goals here are to teach you the operations that these data structures support (along with their running times), and to develop your intuition about which data structures are useful for which sorts of problems.

THE VIDEOS: There are four videos on Dijkstra's shortest-path algorithm. Three are required (the algorithm, examples, and the running time analysis); the proof of correctness is recommended but optional. Heaps begins with a short overview video in which I explain my approach to teaching data structures in this course. The next two videos discuss heaps and some of their applications (required), and some details about how they are typically implemented (optional, recommended for hardcore programmer/computer science types). The next topic discusses balanced binary search trees --- the supported operations and canonical uses (required) and a glimpse at what's "under the hood" (optional).

THE HOMEWORK: Problem Set #5 should solidify your understanding of Dijkstra's shortest-path algorithm and heaps (balanced binary search trees will appear on Problem Set #6). In the programming project you'll implement Dijkstra's algorithm. You can just implement the basic version, but those of you who want a bigger challenge are encouraged to devise a heap-based implementation.